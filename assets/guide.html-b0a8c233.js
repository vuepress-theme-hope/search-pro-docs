import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as l,c as u,b as n,d as s,a,w as p,e as t}from"./app-f7f1fe73.js";const r={},d=t('<p><code>vuepress-plugin-search-pro</code> is a powerful client-side search plugin that can support custom indexing and full-text search.</p><h2 id="get-started" tabindex="-1"><a class="header-anchor" href="#get-started" aria-hidden="true">#</a> Get Started</h2><h3 id="index-range" tabindex="-1"><a class="header-anchor" href="#index-range" aria-hidden="true">#</a> Index Range</h3><p>By default, the plugin will only index headings, article excerpt and custom fields you add. If you want to index all content, you should set <code>indexContent: true</code> in the plugin options.</p><div class="hint-container warning"><p class="hint-container-title">Note</p><p>When indexing languages that is not word based, like Chinese, Japanese or Korean, you should set <code>indexOptions</code> and <code>indexLocaleOptions</code> to perform correct word-splitting, see <a href="#customize-index-generation">Customize Index Generation</a>.</p></div><h3 id="ultra-fast" tabindex="-1"><a class="header-anchor" href="#ultra-fast" aria-hidden="true">#</a> Ultra Fast</h3>',6),k={href:"https://mister-hope.github.io/slimsearch/",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"slimsearch",-1),h=n("code",null,"vuepress-plugin-search-pro",-1),m=t('<h3 id="highlighting-and-context" tabindex="-1"><a class="header-anchor" href="#highlighting-and-context" aria-hidden="true">#</a> Highlighting and Context</h3><p>The plugin highlights keywords in search results and displays context around them.</p><h3 id="auto-suggestions" tabindex="-1"><a class="header-anchor" href="#auto-suggestions" aria-hidden="true">#</a> Auto Suggestions</h3><p>The plugin will show related words as suggestions when you type in the search box by default. If you don&#39;t need this behavior, please set <code>autoSuggestions: false</code>.</p><h3 id="query-and-search-history" tabindex="-1"><a class="header-anchor" href="#query-and-search-history" aria-hidden="true">#</a> Query and Search History</h3><p>The plugin will display 5 last query you type and 5 last search result you choose at startup.</p><p>This behavior can be changed by setting <code>queryHistoryCount</code> and <code>resultHistoryCount</code> option, which you can disable them by setting <code>0</code>.</p><h3 id="full-keyboard-support" tabindex="-1"><a class="header-anchor" href="#full-keyboard-support" aria-hidden="true">#</a> Full Keyboard Support</h3><p>The plugin supports keyboard navigation out of box, where you can:</p><ul><li>use hotkey to activate the search box</li><li>use <code>↑</code> and <code>↓</code> to navigate through search results and auto suggestions</li><li>use <code>Tab</code> to apply suggestions</li><li>use <code>Enter</code> to open the selected result</li><li>use <code>Esc</code> to close suggestions list or the search box</li></ul>',10),g=n("code",null,"Ctrl + K",-1),b=n("code",null,"Ctrl + /",-1),f=n("code",null,"hotkeys",-1),y=t(`<h2 id="custom-fields" tabindex="-1"><a class="header-anchor" href="#custom-fields" aria-hidden="true">#</a> Custom Fields</h2><p>Whether you are a theme developer or a user, it&#39;s a common operation to add extra data to a page through Frontmatter or the <code>extendsPage</code> lifecycle. In most cases, you may want to index these data as well, so here is <code>customFields</code> option.</p><p><code>customFields</code> accepts an array, each element represents a custom search index configuration item. Each configuration item contains 2 parts:</p><ul><li><code>getter</code>: The getter for this custom field. This function takes <code>page</code> object as a parameter and returns the value of the custom field as a string (single), an array of strings (multiple), <code>null</code> (the item is missing).</li><li><code>formatter</code>: a string controlling how the item is displayed in the custom search result, where <code>$content</code> is replaced with the actual value returned by <code>getter</code>. If you&#39;re using multiple languages, you can also set it as an object to set the display format for each language individually.</li></ul><p>These data will be added to indexes and the search result will contain them.</p><p>Difficult to understand? Here is an example.</p><div class="hint-container info"><p class="hint-container-title">Adding author to index</p><p>Assuming you add author information via <code>author</code> in Frontmatter:</p><div class="language-markdown" data-ext="md"><pre class="language-markdown"><code><span class="token front-matter-block"><span class="token punctuation">---</span>
<span class="token front-matter yaml language-yaml"><span class="token key atrule">author</span><span class="token punctuation">:</span> Your name</span>
<span class="token punctuation">---</span></span>

Markdown content...
</code></pre></div><p>You can add authors to the index by setting:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineUserConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vuepress&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> searchProPlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vuepress-plugin-search-pro&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineUserConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">searchProPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      customFields<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          name<span class="token operator">:</span> <span class="token string">&quot;author&quot;</span><span class="token punctuation">,</span>
          <span class="token function-variable function">getter</span><span class="token operator">:</span> <span class="token punctuation">(</span>page<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> page<span class="token punctuation">.</span>frontmatter<span class="token punctuation">.</span>author<span class="token punctuation">,</span>
          formatter<span class="token operator">:</span> <span class="token string">&quot;Author: $content&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Simple, isn&#39;t it?</p></div><details class="hint-container details"><summary>A more complex but practical example</summary><p>Suppose you are using the <code>@vuepress/plugin-git</code> plugin, and you add categories and tags to your articles in Frontmatter via <code>category</code> and <code>tag</code>.</p><p>If you also put Chinese and English under <code>/zh/</code> and <code>/</code> respectively, you need to configure as follows:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineUserConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vuepress&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> searchProPlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vuepress-plugin-search-pro&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineUserConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// We assume you are using the following multilingual</span>
  locales<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;/&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      lang<span class="token operator">:</span> <span class="token string">&quot;en-US&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;/zh/&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      lang<span class="token operator">:</span> <span class="token string">&quot;zh-CN&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">searchProPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      customFields<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token function-variable function">getter</span><span class="token operator">:</span> <span class="token punctuation">(</span>page<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> page<span class="token punctuation">.</span>frontmatter<span class="token punctuation">.</span>category<span class="token punctuation">,</span>
          formatter<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token string-property property">&quot;/&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Category: $content&quot;</span><span class="token punctuation">,</span>
            <span class="token string-property property">&quot;/zh/&quot;</span><span class="token operator">:</span> <span class="token string">&quot;分类：$content&quot;</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          <span class="token function-variable function">getter</span><span class="token operator">:</span> <span class="token punctuation">(</span>page<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> page<span class="token punctuation">.</span>frontmatter<span class="token punctuation">.</span>tag<span class="token punctuation">,</span>
          formatter<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token string-property property">&quot;/&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Tag: $content&quot;</span><span class="token punctuation">,</span>
            <span class="token string-property property">&quot;/zh/&quot;</span><span class="token operator">:</span> <span class="token string">&quot;标签：$content&quot;</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          name<span class="token operator">:</span> <span class="token string">&quot;updateTime&quot;</span><span class="token punctuation">,</span>
          <span class="token function-variable function">getter</span><span class="token operator">:</span> <span class="token punctuation">(</span>page<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> page<span class="token punctuation">.</span>data<span class="token punctuation">.</span>git<span class="token operator">?.</span>updateTime<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          formatter<span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token string-property property">&quot;/&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Update time: $content&quot;</span><span class="token punctuation">,</span>
            <span class="token string-property property">&quot;/zh/&quot;</span><span class="token operator">:</span> <span class="token string">&quot;更新时间：$content&quot;</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="locale-customization" tabindex="-1"><a class="header-anchor" href="#locale-customization" aria-hidden="true">#</a> Locale Customization</h2><p>You can add new locale config or modify existing ones through <code>locales</code> option.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineUserConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vuepress&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> searchProPlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vuepress-plugin-search-pro&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineUserConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  locales<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;/&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// this is a supported language</span>
      lang<span class="token operator">:</span> <span class="token string">&quot;en-US&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;/xx/&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// the plugin does not support this language</span>
      lang<span class="token operator">:</span> <span class="token string">&quot;mm-NN&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">searchProPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      locales<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;/&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token comment">// Override placeholder</span>
          placeholder<span class="token operator">:</span> <span class="token string">&quot;Start Searching&quot;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>

        <span class="token string-property property">&quot;/xx/&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token comment">// Complete locale config for \`mm-NN\` language here</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),w=n("h2",{id:"advanced",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#advanced","aria-hidden":"true"},"#"),s(" Advanced")],-1),q=n("h3",{id:"customize-index-generation",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#customize-index-generation","aria-hidden":"true"},"#"),s(" Customize Index Generation")],-1),x=n("p",null,[s('If you are indexing other language which is not using "Words", like Chinese, Japanese or Korean, you should set '),n("code",null,"indexOptions"),s(" and "),n("code",null,"indexLocaleOptions"),s(" to perform correct word-splitting.")],-1),_={href:"https://github.com/Mister-Hope/nodejs-jieba",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"nodejs-jieba",-1),S=t(`<p>If your docs only contain Chinese, you can tokenize the content like this:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> cut <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;nodejs-jieba&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineUserConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vuepress&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> searchProPlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vuepress-plugin-search-pro&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineUserConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  lang<span class="token operator">:</span> <span class="token string">&quot;zh-CN&quot;</span><span class="token punctuation">,</span>

  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">searchProPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// index all content</span>
      indexContent<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      indexOptions<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// tokenize the content with nodejs-jieba</span>
        <span class="token function-variable function">tokenize</span><span class="token operator">:</span> <span class="token punctuation">(</span>text<span class="token punctuation">,</span> fieldName<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
          fieldName <span class="token operator">===</span> <span class="token string">&quot;id&quot;</span> <span class="token operator">?</span> <span class="token punctuation">[</span>text<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token function">cut</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you need word splitting in some locales, you can set <code>indexLocaleOptions</code>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> cut <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;nodejs-jieba&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineUserConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vuepress&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> searchProPlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vuepress-plugin-search-pro&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineUserConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  locales<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;/&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      lang<span class="token operator">:</span> <span class="token string">&quot;en-US&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;/zh/&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      lang<span class="token operator">:</span> <span class="token string">&quot;zh-CN&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">searchProPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      indexContent<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      indexLocaleOptions<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;/zh/&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token comment">// tokenize the content with nodejs-jieba</span>
          <span class="token function-variable function">tokenize</span><span class="token operator">:</span> <span class="token punctuation">(</span>text<span class="token punctuation">,</span> fieldName<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
            fieldName <span class="token operator">===</span> <span class="token string">&quot;id&quot;</span> <span class="token operator">?</span> <span class="token punctuation">[</span>text<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token function">cut</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="customize-search-options" tabindex="-1"><a class="header-anchor" href="#customize-search-options" aria-hidden="true">#</a> Customize Search Options</h3><p>You can customize search options by importing and calling <code>defineSearchConfig</code> in client config file:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// .vuepress/client.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineClientConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@vuepress/client&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineSearchConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vuepress-plugin-search-pro/client&quot;</span><span class="token punctuation">;</span>

<span class="token function">defineSearchConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// search options here</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineClientConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p>Since searching is done in a Web Worker, setting options to function-typed value is not supported.</p></div><h3 id="using-with-api" tabindex="-1"><a class="header-anchor" href="#using-with-api" aria-hidden="true">#</a> Using with API</h3><p>If you want to use the search API, you need to import the <code>createSearchWorker</code> function from <code>vuepress-plugin-search-pro/client</code>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineClientConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@vuepress/client&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createSearchWorker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vuepress-plugin-search-pro/client&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> search<span class="token punctuation">,</span> terminate <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">createSearchWorker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// use search API</span>
<span class="token function">search</span><span class="token punctuation">(</span><span class="token string">&quot;keyword&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// use search results</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// terminate the worker when you don&#39;t need it</span>
<span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="limitations-in-devserver" tabindex="-1"><a class="header-anchor" href="#limitations-in-devserver" aria-hidden="true">#</a> Limitations in DevServer</h3><p>The search service is powered by a worker, and in dev mode we cannot bundle the worker file.</p>`,13),z=n("code",null,'type: "module"',-1),I={href:"https://caniuse.com/mdn-api_worker_worker_options_type_parameter",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"hotReload: true",-1),j=n("h3",{id:"comparing-with-server-search",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#comparing-with-server-search","aria-hidden":"true"},"#"),s(" Comparing with Server-Search")],-1),T=n("p",null,"Client-side search has advantages, like no backend services and easy to add, but you should be aware that it has disadvantages.",-1),U=n("div",{class:"hint-container warning"},[n("p",{class:"hint-container-title"},"Disadvantages"),n("ol",null,[n("li",null,"You need to index your website during the build stage, which increases website deployment time and website bundle size."),n("li",null,"Users need to fetch the entire search index from your server before searching, which will bring additional traffic and bandwidth pressure to your server. The more content you hold on your site, the larger search index will be."),n("li",null,"To perform a search, users must wait for the search index to be downloaded and parsed locally. This may be much slower than performing a simple web request to get results via Server-search."),n("li",null,"Since searching is done on users devices, the speed is totally based on device performance.")])],-1),N={href:"https://www.algolia.com/",target:"_blank",rel:"noopener noreferrer"},F={href:"https://docsearch.algolia.com/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://docsearch.algolia.com/apply/",target:"_blank",rel:"noopener noreferrer"},L={href:"https://vuejs.press/reference/plugin/docsearch.html",target:"_blank",rel:"noopener noreferrer"},W=n("code",null,"@vuepress/plugin-docsearch",-1);function O(H,$){const e=i("ExternalLinkIcon"),o=i("RouterLink");return l(),u("div",null,[d,n("p",null,[s("With "),n("a",k,[v,a(e)]),s(", searching with "),h,s(" is ultra fast, even on large sites.")]),m,n("p",null,[s("By default, the search hotkey are "),g,s(" and "),b,s(". You can customize search hotkeys via the "),f,s(" option, see "),a(o,{to:"/config.html#hotkeys"},{default:p(()=>[s("Config → Hot Keys")]),_:1}),s(".")]),y,n("p",null,[s("For specific options, see "),a(o,{to:"/config.html#locales"},{default:p(()=>[s("Config → Locale Settings")]),_:1}),s(".")]),w,q,x,n("p",null,[s("If you are building a Chinese docs, you can use "),n("a",_,[s("nodejs-jieba"),a(e)]),s(" to perform word splitting. (Japanese and Korean do not have built-in dictionary, but you can provide your own dictionary and split words with "),C,s(").")]),S,n("p",null,[s("In order to load search indexes in dev mode, we are using a modern service worker with "),z,s(", however currently this feature is not available in Firefox and Safari. So if you want to try searching in devServer, you should use a supported browser, see "),n("a",I,[s("CanIUse"),a(e)]),s(" for support details.")]),n("p",null,[s("For better performance, adding/editing/deleting markdown contents will not trigger update for search index in dev mode. If you are proofreading or refining your search results, you can enable hot reloading by setting the "),P,s(" option, see "),a(o,{to:"/config.html#hotreload"},{default:p(()=>[s("Config → Hot Reload")]),_:1}),s(".")]),j,T,U,n("p",null,[s("In most cases, if you are building a large site, you should choose a service provider to provide search services for your site if possible, such as "),n("a",N,[s("Algolia"),a(e)]),s(", or choose an open source search crawler tool and host it on your own server to provide a search service and regularly craw your site. This is necessary for large sites because users send search terms to the search API via network requests and get search results directly.")]),n("p",null,[s("In particular, "),n("a",F,[s("DocSearch"),a(e)]),s(" is a free search service provided by Algolia for open source projects. If you are creating open source project documentation or an open source technical blog, you can "),n("a",A,[s("apply for it"),a(e)]),s(", and use "),n("a",L,[W,a(e)]),s(" plugin to provide search features.")])])}const Y=c(r,[["render",O],["__file","guide.html.vue"]]);export{Y as default};
